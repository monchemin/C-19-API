// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "c19/security/model"
import repository "c19/security/repository"

// SecurityRepository is an autogenerated mock type for the SecurityRepository type
type SecurityRepository struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: userID, oldPassword, newPassword
func (_m *SecurityRepository) ChangePassword(userID string, oldPassword string, newPassword string) error {
	ret := _m.Called(userID, oldPassword, newPassword)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(userID, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: request
func (_m *SecurityRepository) CreateUser(request model.UserCreateRequest) (string, error) {
	ret := _m.Called(request)

	var r0 string
	if rf, ok := ret.Get(0).(func(model.UserCreateRequest) string); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.UserCreateRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndSession provides a mock function with given fields: sessionID
func (_m *SecurityRepository) EndSession(sessionID string) {
	_m.Called(sessionID)
}

// Login provides a mock function with given fields: request
func (_m *SecurityRepository) Login(request model.LoginRequest) repository.LoginResult {
	ret := _m.Called(request)

	var r0 repository.LoginResult
	if rf, ok := ret.Get(0).(func(model.LoginRequest) repository.LoginResult); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(repository.LoginResult)
	}

	return r0
}

// StartSession provides a mock function with given fields: sessionID
func (_m *SecurityRepository) StartSession(sessionID string) error {
	ret := _m.Called(sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
